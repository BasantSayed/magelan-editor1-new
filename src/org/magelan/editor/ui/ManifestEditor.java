/*
 * The Magelan Project - Vector Graphics Library and Editor
 * Copyright (c) 2003-2004, Assen Antov and Larisa Feldman. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 
 * o Redistributions of source code must retain the above copyright notice, 
 *   this list of conditions and the following disclaimer. 
 * 
 * o Redistributions in binary form must reproduce the above copyright notice, 
 *   this list of conditions and the following disclaimer in the documentation 
 *   and/or other materials provided with the distribution. 
 * 
 * o Neither the name Magelan nor the names of project members and
 *   contributors may be used to endorse or promote products derived 
 *   from this software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * Suggestions, comments and fixes should be sent to:
 * aantov@users.sourceforge.net
 * larisa@users.sourceforge.net
 */
package org.magelan.editor.ui;

import org.magelan.commons.*;
import org.magelan.commons.ui.*;
import org.magelan.editor.*;

import java.awt.*;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.io.File;

/**
 * An editor for manifest files. Can be used as a stand-alone program.
 * <p>
 * Generated by V<i>isual</i> Factory 1.0 (c) 2001 by Assen Antov
 * Mon Apr 08 19:02:06 EEST 2002
 * <p>
 * @version	2.0, 12/2003
 * @author	Assen Antov
 */
public class ManifestEditor extends JDialog implements java.awt.event.ActionListener {
	
	private static Lang lang = Lang.getLang(Editor.STRINGS);
	
	private ClassManifest mf;
	private JFileChooser fileChooser;
	private String mfName = ""; //$NON-NLS-1$

	private static final String JAR = ".jar"; //$NON-NLS-1$
	private static final String HTML = ".html"; //$NON-NLS-1$
	private static final String HTM = ".htm"; //$NON-NLS-1$
	private static final String MF = ".mf"; //$NON-NLS-1$
	private static final String MANIFEST = ".manifest"; //$NON-NLS-1$
			
	/**
	 */
	public ManifestEditor() {
		this(null, ""); //$NON-NLS-1$
	}
			
	/**
	 */
	public ManifestEditor(Frame parent, String mfName) {
		super(parent, true);
		constructGUI();
		
		this.mfName = mfName;
		
		// toolbar
		javax.swing.JToolBar fileToolBar = new javax.swing.JToolBar(lang.getString("File_15")); //$NON-NLS-1$
		fileToolBar.add(button(lang.getString("ManifestEditor.new"), "new", Icons.NEW_ICON)); //$NON-NLS-1$ //$NON-NLS-2$
		fileToolBar.add(button(lang.getString("ManifestEditor.open"), "open", Icons.OPEN_ICON)); //$NON-NLS-1$ //$NON-NLS-2$
		fileToolBar.add(button(lang.getString("ManifestEditor.save"), "save", Icons.SAVE_ICON)); //$NON-NLS-1$ //$NON-NLS-2$
		fileToolBar.setRollover(true);
		getContentPane().add(fileToolBar, BorderLayout.NORTH);
		
		SwingUtil.center(this);
		
		// add action listeners
		className.addActionListener(this);
		helpPath.addActionListener(this);
		helpPathButton.addActionListener(this);
		createdBy.addActionListener(this);
		
		// configure file chooser
		fileChooser = new JFileChooser();
		fileChooser.setFileView(new javax.swing.filechooser.FileView() {
			public String getTypeDescription(File f) {
				String name = f.getName().toString().toLowerCase();
				if (name.endsWith(JAR)) {
					return lang.getString("ManifestEditor.filter.JAR"); //$NON-NLS-1$
				}
				else if (name.endsWith(HTML) || name.endsWith(HTM)) {
					return lang.getString("ManifestEditor.filter.HTML"); //$NON-NLS-1$
				}
				else if (name.endsWith(MANIFEST) || name.endsWith(MF)) {
					return lang.getString("ManifestEditor.filter.manifest"); //$NON-NLS-1$
				}
				else return null;
			}
			public Icon getIcon(File f) {
				String name = f.getName().toString().toLowerCase();
				if (name.endsWith(JAR)) {
					return Icons.JAR_ICON;
				}
				else if (name.endsWith(HTML)) {
					return Icons.HTML_ICON;
				}
				else if (name.endsWith(MANIFEST) || name.endsWith(MF)) {
					return Icons.MF_ICON;
				}
				else return null;
			}
		});
	}

	/**
	 * Listens for <code>ActionEvent</code>s.
	 * <p>
	 * @param	e	action event
	 */
	public void actionPerformed(java.awt.event.ActionEvent e) {
		String src = ((java.awt.Component) e.getSource()).getName();

		if ("new".equals(src)) { //$NON-NLS-1$
			mfName = ""; //$NON-NLS-1$
			setManifest(""); //$NON-NLS-1$
		}
		if ("open".equals(src)) { //$NON-NLS-1$
			fileChooser.setDialogTitle(lang.getString("ManifestEditor.chooser.open")); //$NON-NLS-1$
			fileChooser.setFileFilter(manifestFilter);
			fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
			int returnVal = fileChooser.showOpenDialog(this);
			if (returnVal == JFileChooser.APPROVE_OPTION) {
				setManifest(new ClassManifest(fileChooser.getSelectedFile().getAbsolutePath()));
			}
		}
		if ("save".equals(src)) { //$NON-NLS-1$
			/*
			 * Update manifest
			 */
			mf.setName(className.getText());
			mf.setVersion(version.getText());
			mf.setHelpPath(helpPath.getText());
			mf.setInfo(info.getText());
			mf.setCreatedBy(createdBy.getText());

			String str = ""; //$NON-NLS-1$
			String sep = System.getProperty("path.separator"); //$NON-NLS-1$
			java.util.Iterator iter = ((ClasspathPanel) classPathPanel).getListData().iterator();
			while (iter.hasNext()) {
				str += (String) iter.next() + (iter.hasNext()? sep : ""); //$NON-NLS-1$
			}
			mf.setClassPath(str);
			
			/*
			 * Save manifest file
			 */
			if (mfName.equals("")) { //$NON-NLS-1$
				fileChooser.setDialogTitle(lang.getString("ManifestEditor.chooser.save")); //$NON-NLS-1$
				fileChooser.setFileFilter(manifestFilter);
				fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
				int returnVal = fileChooser.showSaveDialog(this);
				if (returnVal == JFileChooser.APPROVE_OPTION) {
					mf.save(fileChooser.getSelectedFile().getAbsolutePath());
				}
			}
			else {
				mf.save(mfName);
			}
		}
		if ("helpPathButton".equals(src)) { //$NON-NLS-1$
			fileChooser.setDialogTitle(lang.getString("ManifestEditor.chooser.help")); //$NON-NLS-1$
			fileChooser.setFileFilter(htmlFilter);
			fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
			int returnVal = fileChooser.showOpenDialog(this);
			if (returnVal == JFileChooser.APPROVE_OPTION) {
				helpPath.setText(fileChooser.getSelectedFile().getAbsolutePath());
			}
		}
	}

	public void setManifest(String mf) {
		mfName = mf;
		setManifest(new ClassManifest(mf));
	}
	
	public void setManifest(ClassManifest mf) {
		this.mf = mf;
		className.setText(mf.getName());
		version.setText(mf.getVersion());
		helpPath.setText(mf.getHelpPath());
		info.setText(mf.getInfo());
		createdBy.setText(mf.getCreatedBy());
		((ClasspathPanel) classPathPanel).setListData(mf.getClassPath());
	}
	
	javax.swing.JButton button(String toolTipText, String name, Icon icon) {
		javax.swing.JButton b = new javax.swing.JButton();
		b.setName(name);
		b.setIcon(icon);
		b.setToolTipText(toolTipText);
		b.addActionListener(this);
		b.setMargin(new Insets(0, 0, 0, 0));
		//b.setBorderPainted(false);
		b.setRolloverEnabled(true);
		return b;
	}
	
	
	/**
	 * Manifest File filter
	 */
	private FileFilter manifestFilter = new FileFilter() {
		public boolean accept(File f) {
			if (f.isDirectory() || f.getName().endsWith(MANIFEST) || f.getName().endsWith(MF)) return true;
			else return false;
		}
		public String getDescription() { return lang.getString("ManifestEditor.filetype.manifest"); } //$NON-NLS-1$
	};
	
	/**
	 * Manifest File filter
	 */
	private FileFilter htmlFilter = new FileFilter() {
		public boolean accept(File f) {
			if (f.isDirectory() || f.getName().endsWith(HTML) || f.getName().endsWith(HTM)) return true;
			else return false;
		}
		public String getDescription() { return lang.getString("ManifestEditor.filetype.HTML"); } //$NON-NLS-1$
	};
	
	
	
	/**
	 * <p>
	 * @param	args	array of parameter strings
	 */
	public static void main(String[] args) {
		ManifestEditor me = new ManifestEditor();
		me.setDefaultCloseOperation(EXIT_ON_CLOSE);
		me.setVisible(true);
	}
	
	
	/**
	 * Constructs the GUI.
	 */
	public void constructGUI() {

			// javax.swing.JFrame
			setName("ManifestEditor"); //$NON-NLS-1$
			setBounds(409, 179, 405, 470);
			setTitle(lang.getString("ManifestEditor.title")); //$NON-NLS-1$
			setResizable(true);
			setDefaultCloseOperation(HIDE_ON_CLOSE);

				// javax.swing.JTabbedPane
				tab = new javax.swing.JTabbedPane();
				tab.setName("tab"); //$NON-NLS-1$
				//tab.setPreferredSize(new Dimension(50, 50));
				getContentPane().add(tab);

					// javax.swing.JPanel
					panel1 = new LabelledItemPanel();
					tab.addTab(lang.getString("ManifestEditor.tab.manifest"), Icons.MF_ICON, panel1); //$NON-NLS-1$

						// javax.swing.JTextField
						className = new javax.swing.JTextField();
						className.setText(""); //$NON-NLS-1$
						className.setMargin(new Insets(0, 0, 0, 0));
						className.setName("className"); //$NON-NLS-1$
						className.setPreferredSize(new Dimension(297, 20));
						panel1.addItem(lang.getString("ManifestEditor.label.className"), className); //$NON-NLS-1$

						// javax.swing.JPanel
						panel2 = new javax.swing.JPanel();
						panel2.setLayout(new BorderLayout());
												
							// javax.swing.JTextField
							helpPath = new javax.swing.JTextField();
							helpPath.setText(""); //$NON-NLS-1$
							helpPath.setMargin(new Insets(0, 0, 0, 0));
							helpPath.setName("helpPath"); //$NON-NLS-1$
							helpPath.setPreferredSize(new Dimension(270, 20));
							panel2.add(helpPath, BorderLayout.CENTER);
	
							// javax.swing.JButton
							helpPathButton = new javax.swing.JButton();
							helpPathButton.setText(""); //$NON-NLS-1$
							helpPathButton.setActionCommand(""); //$NON-NLS-1$
							helpPathButton.setMargin(new Insets(0, 0, 0, 0));
							helpPathButton.setIcon(Icons.OPEN_ICON);
							helpPathButton.setName("helpPathButton"); //$NON-NLS-1$
							helpPathButton.setPreferredSize(new Dimension(22, 22));
							panel2.add(helpPathButton, BorderLayout.EAST);
						
						panel1.addItem(lang.getString("ManifestEditor.label.helpPath"), panel2); //$NON-NLS-1$
						
						// javax.swing.JTextArea
						info = new javax.swing.JTextArea();
						info.setLineWrap(true);
						info.setWrapStyleWord(true);
						info.setText(""); //$NON-NLS-1$
						info.setMargin(new Insets(0, 0, 0, 0));
						info.setName("info"); //$NON-NLS-1$
						info.setPreferredSize(new Dimension(50, 50));
							
						// javax.swing.JScrollPane
						scroll = new javax.swing.JScrollPane(info);
						scroll.setName("scroll"); //$NON-NLS-1$
						scroll.setPreferredSize(new Dimension(370, 122));
						scroll.setMinimumSize(new Dimension(370, 200));
						panel1.addItem(lang.getString("ManifestEditor.label.info"), scroll); //$NON-NLS-1$

						// javax.swing.JTextField
						createdBy = new javax.swing.JTextField();
						createdBy.setText(""); //$NON-NLS-1$
						createdBy.setMargin(new Insets(0, 0, 0, 0));
						createdBy.setName("createdBy"); //$NON-NLS-1$
						createdBy.setPreferredSize(new Dimension(270, 20));
						panel1.addItem(lang.getString("ManifestEditor.label.createdBy"), createdBy); //$NON-NLS-1$

						// javax.swing.JTextField
						version = new javax.swing.JTextField();
						version.setEditable(false);
						version.setText(""); //$NON-NLS-1$
						version.setMargin(new Insets(0, 0, 0, 0));
						version.setName("version"); //$NON-NLS-1$
						version.setPreferredSize(new Dimension(270, 20));
						panel1.addItem(lang.getString("ManifestEditor.label.MFVersion"), version); //$NON-NLS-1$
						
			// javax.swing.JPanel
			classPathPanel = new ClasspathPanel();
			classPathPanel.setName("classPathPanel"); //$NON-NLS-1$
			tab.addTab(lang.getString("ManifestEditor.tab.classPath"), Icons.PATH_ICON, classPathPanel); //$NON-NLS-1$
	}

	// variables
	private javax.swing.JTabbedPane tab;
	private LabelledItemPanel panel1;
	private javax.swing.JLabel component7;
	private javax.swing.JTextField className;
	private javax.swing.JPanel classPathPanel;
	private javax.swing.JLabel component11;
	private javax.swing.JTextField helpPath;
	private javax.swing.JButton helpPathButton;
	private javax.swing.JPanel panel2;
	private javax.swing.JScrollPane scroll;
	private javax.swing.JTextArea info;
	private javax.swing.JLabel component17;
	private javax.swing.JTextField createdBy;
	
	private javax.swing.JLabel component18;
	private javax.swing.JTextField version;
}